In object-oriented programming (OOP), delegation is a design technique where an object (the delegator) handles a request by passing it on to another object (the delegate) that is responsible for performing the actual work. This allows for code reuse and promotes a "has-a" relationship between objects, in contrast to the "is-a" relationship found in inheritance.

Here are key aspects of delegation in OOP:
Responsibility Transfer:
The core idea is that the delegator object doesn't implement a particular behavior itself but instead relies on a delegate object to carry out that responsibility.

Object Composition:
Delegation typically involves object composition, where the delegator object holds an instance of the delegate object as a member. When a method is invoked on the delegator that requires the delegated behavior, the delegator forwards the call to the corresponding method on its delegate.

Flexibility and Decoupling:
Delegation offers more flexibility than inheritance because the delegate object can be changed at runtime, allowing for dynamic behavior modification. It also promotes loose coupling between classes, as the delegator only needs to know the interface of the delegate, not its specific implementation details.

Alternative to Inheritance:
Delegation can be used as an alternative to inheritance for achieving code reuse, especially when the "is-a" relationship is not semantically appropriate. For example, a Car "has a" Engine, so the Car could delegate engine-related operations to an Engine object rather than inheriting from one.

Design Patterns:
Several design patterns leverage delegation, such as the Strategy pattern (where an object delegates an algorithm to a separate strategy object) and the Adapter pattern (where an object adapts the interface of another object through delegation).

Example:
Consider a PrinterController class that needs to handle printing tasks. Instead of implementing the printing logic directly, it can delegate this responsibility to a Printer object.


class Printer {
    public void printDocument(String document) {
        System.out.println("Printing: " + document);
    }
}

class PrinterController {
    private Printer printer; // The delegate

    public PrinterController() {
        this.printer = new Printer(); // Initialize the delegate
    }

    public void initiatePrint(String document) {
        // Delegate the printing responsibility to the Printer object
        printer.printDocument(document);
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        PrinterController controller = new PrinterController();
        controller.initiatePrint("My important report");
    }
}